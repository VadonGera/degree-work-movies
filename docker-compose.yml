name: movies-container
# Если MODE: django - "manage.py runserver 0.0.0.0:8000"
# Если MODE: gunicorn - gunicorn на порту PORT (! ports: "PORT:PORT")
services:
  web:
    build:
      context: ./movies
      dockerfile: Dockerfile
    image: movies-image:2024.point
    volumes:
      - ./movies/src:/app
      - static_volume:/app/staticfiles  # Добавляем volume для общей статики
#    command: >
#      sh -c "
#      python manage.py runserver 0.0.0.0:8000"
    ports:
      - ${PORT_BOX}:${PORT_BOX}
      # - 127.0.0.1:8000:8000
    env_file:
      - .env
    environment:
      DJANGO_ENV: ${DJANGO_BOX}  #development  # (development / production)
      MODE: ${MODE_BOX}  #  (django / gunicorn)
      PORT: ${PORT_BOX}

    # Дожидаемся запуска контейнера db
    depends_on:
      - postgres
    networks:
      - horse

  postgres:
    image: postgres:latest
    restart: always
    volumes:
      - my_data:/var/lib/postgresql/data
    env_file:
      - .env
    environment:
      POSTGRES_PASSWORD: ${PGSQL_PASSWORD}
      POSTGRES_USER: ${PGSQL_USER}
      POSTGRES_DB: ${PGSQL_DB}
#      POSTGRES_PASSWORD: ${PGSQL_PASSWORD}
#      POSTGRES_USER: ${PGSQL_USER}
#      POSTGRES_DB: ${PGSQL_DB}
      # POSTGRES_HOST_AUTH_METHOD: trust
#    healthcheck:
#      # Запускаем внутри контейнера проверку его состояния
#      test: pg_isready -h postgres -U user -d password
    networks:
      - horse

volumes:
  my_data:  # Объявляем том my_data для хранения данных PostgreSQL
  static_volume:  # Определяем общий volume статики

networks:
  horse:
    driver: bridge