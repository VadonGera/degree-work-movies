name: movies-container
# Если MODE: django - "manage.py runserver 0.0.0.0:8000"
# Если MODE: gunicorn - gunicorn на порту PORT (! ports: "PORT:PORT")
services:

  nginx:
    image: nginx:latest
    restart: always
    container_name: movies-nginx
    volumes:
#      - static_volume:/staticfiles  # Подключаем volume со статикой
      - static_data:/usr/share/nginx/html/static
      - ./movies/src/media:/usr/share/nginx/html/media  # Монтируем media напрямую
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./data/certbot/conf:/etc/letsencrypt    # <--here certbot
      - ./data/certbot/www:/var/www/certbot     # <--here certbot
    ports:
      - "80:80" # порт открыт для внешнего мира.
      - "443:443"
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    links:
      - web
    depends_on:
      - web
    networks:
      - horse

  certbot:
    image: certbot/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt          # <--here certbot
      - ./data/certbot/www:/var/www/certbot           # <--here certbot

  web:
    build:
      context: ./movies
      dockerfile: Dockerfile
    image: movies-image:2024.point
    volumes:
      - ./movies/src:/app
      - static_data:/app/staticfiles  # Добавляем volume для общей статики
#      - media_data:/app/media
#    ports:
#      - ${PORT_BOX}:${PORT_BOX}
    env_file:
      - .env
    environment:
      # DJANGO_ENV: ${DJANGO_BOX}  #development  # (development / production)
      MODE: ${MODE_BOX}  #  (django / gunicorn)
      PORT: ${PORT_BOX}

    # Дожидаемся запуска контейнера db
    depends_on:
      postgres:
        # и проверки его состояния
        condition: service_healthy
    networks:
      - horse

  postgres:
    image: postgres:latest
    restart: always
    volumes:
      - my_data:/var/lib/postgresql/data
    env_file:
      - .env
    environment:
      POSTGRES_PASSWORD: ${PGSQL_PASSWORD}
      POSTGRES_USER: ${PGSQL_USER}
      POSTGRES_DB: ${PGSQL_DB}
    healthcheck:
      # Запускаем внутри контейнера проверку его состояния
      test: pg_isready -h postgres -U ${PGSQL_USER} -d ${PGSQL_DB}
      # Интервал между проверками
      interval: 2s
      # Время на завершение проверки
      timeout: 2s
      # Количество неуспешных попыток проверки для "отказа"
      retries: 3
      # Ожидание перед началом проверок
      start_period: 2s
    networks:
      - horse

volumes:
  my_data:  # Объявляем том my_data для хранения данных PostgreSQL
  static_data:  # Определяем общий volume статики
#  media_data:

networks:
  horse:
    driver: bridge