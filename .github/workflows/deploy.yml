name: Tests & Copy & Deploy to Server

on:
  workflow_dispatch: # Ручной запуск через интерфейс GitHub Actions
  push:
    branches:
      - main


jobs:
  deploy:
    needs: test
    runs-on: ubuntu-latest

    steps:

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_SERVER_KEY }}" > ~/.ssh/id_ed25519
        chmod 600 ~/.ssh/id_ed25519
        ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

    - name: Copy repository to server
      run: |
        rsync -avz --delete \
          --exclude='.git' \
          --exclude='.env' \
          --exclude='.env.example' \
          --exclude='.gitignore' \
          --exclude='.github/' \
          --exclude='movies/src/media/' \
          --exclude='data/' \
          --exclude='nginx.conf' \
          ./ \
          ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:/home/${{ secrets.SERVER_USER }}/movies-x-point/

    - name: Deploy Docker Compose
      run: |
        ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          cd /home/${{ secrets.SERVER_USER }}/movies-x-point/
          docker-compose -f docker-compose.pro.yml down --rmi local
          docker-compose -f docker-compose.pro.yml up --build -d
        EOF


  test:
    runs-on: ubuntu-latest  # Используем виртуальную машину с Ubuntu

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-  
          --health-cmd "pg_isready -U test_user"  
          --health-interval 10s  
          --health-timeout 5s  
          --health-retries 5  

    steps:

    # 1. Клонируем репозиторий с кодом
    - name: Checkout repository
      uses: actions/checkout@v4

    # 2. Устанавливаем Python 3.12
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.12  # Указываем необходимую версию Python

    # 3. Устанавливаем зависимости проекта
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip  # Обновляем pip
        pip install -r movies/requirements.txt  # Устанавливаем зависимости из requirements.txt

    # 4. Устанавливаем дополнительные зависимости для тестов (если есть)
    - name: Install test dependencies
      run: |
        pip install pytest pytest-django  # Установка pytest, если используется
        # Добавьте другие пакеты, если нужно

    # 5. Устанавливаем переменную окружения для базы данных
    - name: Set database environment variable
      run: |
        echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> $GITHUB_ENV
        echo "DEBUG=True" >> $GITHUB_ENV  # Для тестового окружения
        echo "ALLOWED_HOSTS=127.0.0.1" >> $GITHUB_ENV
        echo "SQL_ENGINE=django.db.backends.postgresql_psycopg2" >> $GITHUB_ENV
        echo "SQL_DATABASE=test_db" >> $GITHUB_ENV
        echo "SQL_USER=test_user" >> $GITHUB_ENV
        echo "SQL_PASSWORD=test_password" >> $GITHUB_ENV
        echo "SQL_HOST=127.0.0.1" >> $GITHUB_ENV  # Используйте 'localhost', если база данных работает в контейнере на том же хосте
        

    # 6. Запускаем тесты
    - name: Run tests
      env:
        PGSQL_ENGINE: ${{ env.SQL_ENGINE }}
        PGSQL_DATABASE: ${{ env.SQL_DATABASE }}
        PGSQL_USER: ${{ env.SQL_USER }}
        PGSQL_PASSWORD: ${{ env.SQL_PASSWORD }}
        # PGSQL_HOST: ${{ env.SQL_HOST }}
        PGSQL_PORT: ${{ env.SQL_PORT }}
        ALLOWED_HOSTS: ${{ env.ALLOWED_HOSTS }}
        SECRET_KEY: ${{ env.SECRET_KEY }}
        DEBUG: ${{ env.DEBUG }}
      run: |
        cd movies/src
        pytest --cov=movies --cov-report=term-missing
